# test_app.py
import pytest
from fastapi.testclient import TestClient
from unittest.mock import patch, MagicMock
import json

from main import app
from nlp_helper import MoodDetector

# Create test client
client = TestClient(app)

# Mock data
MOCK_USER_ID = "test_user"
MOCK_ACCESS_TOKEN = "mock_access_token"
MOCK_AUTH_URL = "https://accounts.spotify.com/authorize?mock=true"
MOCK_TOKEN_INFO = {
    "access_token": MOCK_ACCESS_TOKEN,
    "refresh_token": "mock_refresh_token",
    "expires_at": 1672531200,  # Example timestamp
}

MOCK_PLAYLIST = {
    "id": "mock_playlist_id",
    "name": "Mock Playlist",
    "description": "A happy mood playlist generated by AI",
    "tracks": {"items": [{"track": {"id": "track1"}}]}
}

MOCK_TRACKS = [
    {"id": "track1", "name": "Happy Song", "uri": "spotify:track:track1", "artists": [{"name": "Artist 1"}]},
    {"id": "track2", "name": "Sad Song", "uri": "spotify:track:track2", "artists": [{"name": "Artist 2"}]},
]

def test_root_endpoint():
    """Test the root endpoint"""
    response = client.get("/")
    assert response.status_code == 200
    assert "status" in response.json()
    assert response.json()["status"] == "running"

@patch("spotipy.oauth2.SpotifyOAuth")
def test_authorize_endpoint(mock_oauth):
    """Test the authorize endpoint"""
    # Setup mock
    mock_instance = MagicMock()
    mock_instance.get_authorize_url.return_value = MOCK_AUTH_URL
    mock_oauth.return_value = mock_instance
    
    # Make request
    response = client.get("/authorize")
    
    # Check response
    assert response.status_code == 200
    assert "authorization_url" in response.json()
    assert response.json()["authorization_url"] == MOCK_AUTH_URL

@patch("main.predict_mood")
def test_detect_mood_endpoint(mock_predict_mood):
    """Test the detect mood endpoint"""
    # Setup mock
    mock_predict_mood.return_value = {"mood": "happy", "confidence": 0.85}
    
    # Make request
    response = client.post("/detect-mood", json={"text": "I'm feeling great today!"})
    
    # Check response
    assert response.status_code == 200
    assert response.json() == {"mood": "happy", "confidence": 0.85}

@pytest.mark.parametrize(
    "text,expected_mood",
    [
        ("I am so happy today!", "happy"),
        ("I'm feeling sad and lonely", "sad"),
        ("I'm so excited for the concert!", "energetic"),
        ("I just want to relax", "calm"),
        ("I need to concentrate on my work", "focused"),
    ],
)
def test_nlp_mood_detection(text, expected_mood):
    """Test mood detection from text"""
    # This is a partial test that doesn't actually use the model
    # In real testing we would use a mock or a simplified version
    
    detector = MoodDetector()
    # Replace the model with a mock that returns predetermined values
    detector.model = None  # Force fallback mode
    
    # Override the random choice with a fixed return
    with patch("random.choice", return_value=expected_mood):
        result = detector.predict_mood(text)
        
    assert result["mood"] == expected_mood
    assert "confidence" in result

@patch("spotipy.Spotify")
@patch("main.get_current_user")
@patch("main.get_top_tracks")
@patch("main.get_recommendations")
@patch("main.create_playlist")
def test_generate_playlist_endpoint(
    mock_create_playlist, mock_get_recommendations, mock_get_top_tracks, 
    mock_get_current_user, mock_spotify
):
    """Test the generate playlist endpoint"""
    # Setup mocks
    mock_get_current_user.return_value = MOCK_ACCESS_TOKEN
    mock_spotify_instance = MagicMock()
    mock_spotify_instance.me.return_value = {"id": MOCK_USER_ID}
    mock_spotify.return_value = mock_spotify_instance
    
    mock_get_top_tracks.return_value = ["track1", "track2"]
    mock_get_recommendations.return_value = MOCK_TRACKS
    mock_create_playlist.return_value = MOCK_PLAYLIST
    
    # Make request
    response = client.post(
        "/generate-playlist",
        json={"mood": "happy", "name": "My Happy Playlist", "limit": 10},
        headers={"Authorization": f"Bearer {MOCK_ACCESS_TOKEN}"}
    )
    
    # Check response
    assert response.status_code == 200
    assert response.json()["status"] == "success"
    assert response.json()["mood"] == "happy"
    assert "tracks" in response.json()

# Add more tests for other endpoints and error handling
